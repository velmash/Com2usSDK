// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Com2uSTestSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import Com2uSTestSDK
import Foundation
import GoogleSignIn
import SnapKit
import Swift
import UIKit
import UserNotifications
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum AuthError : Swift.Error {
  case notSignedIn
  case signInFailed(Swift.String)
  case signOutFailed(Swift.String)
  case invalidClientID
}
public protocol NotificationService {
  func scheduleNotification(id: Swift.String, title: Swift.String, body: Swift.String, triggerDate: Foundation.Date) async throws
  func cancelNotification(id: Swift.String) async throws
  func cancelAllNotifications() async throws
}
public protocol AuthService {
  var isSignedIn: Swift.Bool { get }
  func signIn(clientID: Swift.String) async throws -> Com2uSTestSDK.User
  func signIn(clientID: Swift.String, completion: @escaping (Swift.Result<Com2uSTestSDK.User, any Swift.Error>) -> Swift.Void)
  func signOut() async throws
  func showProfileView(from viewController: UIKit.UIViewController)
}
public enum NotificationError : Swift.Error {
  case permissionDenied
  case invalidTriggerDate
  case schedulingFailed(Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class NotificationDelegate : ObjectiveC.NSObject, UserNotifications.UNUserNotificationCenterDelegate {
  public static let shared: Com2uSTestSDK.NotificationDelegate
  @objc final public func userNotificationCenter(_ center: UserNotifications.UNUserNotificationCenter, willPresent notification: UserNotifications.UNNotification, withCompletionHandler completionHandler: @escaping (UserNotifications.UNNotificationPresentationOptions) -> Swift.Void)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ComtusSDK {
  public static let shared: Com2uSTestSDK.ComtusSDK
  final public var auth: any Com2uSTestSDK.AuthService {
    get
  }
  final public var notification: any Com2uSTestSDK.NotificationService {
    get
  }
  final public func configure()
  @objc deinit
}
public struct User : Swift.Codable {
  public let email: Swift.String
  public let name: Swift.String
  public let profileImageURL: Foundation.URL?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
