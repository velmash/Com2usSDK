MyGameSDK/
├── MyGameSDK/ (프레임워크 소스)
│   ├── Public/
│   │   ├── MyGameSDK.swift
│   │   ├── Auth/
│   │   │   └── AuthService.swift
│   │   └── Notification/
│   │       └── NotificationService.swift
│   ├── Core/
│   │   ├── Extensions/
│   │   │   └── UIViewController+Extensions.swift
│   │   └── Utils/
│   │       └── Logger.swift
│   ├── Authentication/
│   │   ├── Domain/
│   │   │   ├── Repository/
│   │   │   │   └── AuthRepository.swift
│   │   │   └── UseCase/
│   │   │       ├── SignInUseCase.swift
│   │   │       └── SignOutUseCase.swift
│   │   ├── Data/
│   │   │   ├── GoogleAuthService.swift
│   │   │   └── AuthRepositoryImpl.swift
│   │   └── Presentation/
│   │       └── ProfileViewController.swift
│   └── Notification/
│       ├── Domain/
│       │   ├── Model/
│       │   │   └── LocalNotification.swift
│       │   ├── Repository/
│       │   │   └── NotificationRepository.swift
│       │   └── UseCase/
│       │       ├── ScheduleNotificationUseCase.swift
│       │       └── CancelNotificationUseCase.swift
│       ├── Data/
│       │   ├── NotificationManager.swift
│       │   └── NotificationRepositoryImpl.swift
│       └── Presentation/
│           └── NotificationDelegate.swift
├── MyGameSDKExample/ (예제 앱)
│   ├── AppDelegate.swift
│   ├── ViewController.swift
│   ├── Info.plist
│   └── Assets.xcassets/
├── Podfile
├── Podfile.lock
├── build_framework.sh
└── MyGameSDK.xcworkspace



import Foundation
import UIKit

public final class MyGameSDK {
    // 싱글톤 인스턴스
    public static let shared = MyGameSDK()
    
    // 서비스
    public private(set) lazy var auth: AuthService = AuthServiceImpl()
    public private(set) lazy var notification: NotificationService = NotificationServiceImpl()
    
    // 초기화 설정
    public func configure() {
        // SDK 초기화 로직
        NotificationManager.shared.setupNotifications()
    }
    
    private init() {}
}



import UIKit

public protocol AuthService {
    /// 현재 로그인 상태
    var isSignedIn: Bool { get }
    
    /// Google 로그인 수행
    /// - Parameter clientID: Google Developer Console에서 발급받은 Client ID
    /// - Returns: 로그인된 사용자 정보
    func signIn(clientID: String) async throws -> User
    
    /// 기존 완료 핸들러 스타일의 로그인 메서드 (호환성 유지)
    func signIn(clientID: String, completion: @escaping (Result<User, Error>) -> Void)
    
    /// 로그아웃 수행
    func signOut() async throws
    
    /// 사용자 프로필 화면 표시
    /// - Parameter viewController: 프로필 화면을 표시할 부모 뷰 컨트롤러
    func showProfileView(from viewController: UIViewController)
}

// 사용자 정보 모델
public struct User: Codable {
    public let email: String
    public let name: String
    public let profileImageURL: URL?
    
    public init(email: String, name: String, profileImageURL: URL?) {
        self.email = email
        self.name = name
        self.profileImageURL = profileImageURL
    }
}

// 인증 관련 에러
public enum AuthError: Error {
    case notSignedIn
    case signInFailed(String)
    case signOutFailed(String)
    case invalidClientID
}

// AuthService 구현체
final class AuthServiceImpl: AuthService {
    private let repository: AuthRepository
    private let signInUseCase: SignInUseCase
    private let signOutUseCase: SignOutUseCase
    
    init() {
        let repository = AuthRepositoryImpl()
        self.repository = repository
        self.signInUseCase = SignInUseCase(repository: repository)
        self.signOutUseCase = SignOutUseCase(repository: repository)
    }
    
    var isSignedIn: Bool {
        return repository.currentUser != nil
    }
    
    func signIn(clientID: String) async throws -> User {
        return try await signInUseCase.execute(clientID: clientID)
    }
    
    func signIn(clientID: String, completion: @escaping (Result<User, Error>) -> Void) {
        Task {
            do {
                let user = try await signIn(clientID: clientID)
                completion(.success(user))
            } catch {
                completion(.failure(error))
            }
        }
    }
    
    func signOut() async throws {
        try await signOutUseCase.execute()
    }
    
    func showProfileView(from viewController: UIViewController) {
        let user = repository.currentUser
        let profileVC = ProfileViewController(user: user, authService: self)
        let navController = UINavigationController(rootViewController: profileVC)
        viewController.present(navController, animated: true)
    }
}


import Foundation

public protocol NotificationService {
    /// 로컬 알림 스케줄링
    /// - Parameters:
    ///   - id: 알림 고유 ID (취소 시 사용)
    ///   - title: 알림 제목
    ///   - body: 알림 내용
    ///   - triggerDate: 알림이 표시될 시간
    func scheduleNotification(id: String, title: String, body: String, triggerDate: Date) async throws
    
    /// 특정 ID의 알림 취소
    /// - Parameter id: 취소할 알림 ID
    func cancelNotification(id: String) async throws
    
    /// 모든 알림 취소
    func cancelAllNotifications() async throws
}

// 알림 관련 에러
public enum NotificationError: Error {
    case permissionDenied
    case invalidTriggerDate
    case schedulingFailed(String)
}

// NotificationService 구현체
final class NotificationServiceImpl: NotificationService {
    private let repository: NotificationRepository
    private let scheduleNotificationUseCase: ScheduleNotificationUseCase
    private let cancelNotificationUseCase: CancelNotificationUseCase
    private let cancelAllNotificationsUseCase: CancelAllNotificationsUseCase
    
    init() {
        let repository = NotificationRepositoryImpl()
        self.repository = repository
        self.scheduleNotificationUseCase = ScheduleNotificationUseCase(repository: repository)
        self.cancelNotificationUseCase = CancelNotificationUseCase(repository: repository)
        self.cancelAllNotificationsUseCase = CancelAllNotificationsUseCase(repository: repository)
        
        // 알림 델리게이트 설정
        UNUserNotificationCenter.current().delegate = NotificationDelegate.shared
    }
    
    func scheduleNotification(id: String, title: String, body: String, triggerDate: Date) async throws {
        let notification = LocalNotification(id: id, title: title, body: body, triggerDate: triggerDate)
        try await scheduleNotificationUseCase.execute(notification: notification)
    }
    
    func cancelNotification(id: String) async throws {
        try await cancelNotificationUseCase.execute(id: id)
    }
    
    func cancelAllNotifications() async throws {
        try await cancelAllNotificationsUseCase.execute()
    }
}

import Foundation

protocol AuthRepository {
    var currentUser: User? { get }
    func signIn(clientID: String) async throws -> User
    func signOut() async throws
}

import Foundation

final class SignInUseCase {
    private let repository: AuthRepository
    
    init(repository: AuthRepository) {
        self.repository = repository
    }
    
    func execute(clientID: String) async throws -> User {
        return try await repository.signIn(clientID: clientID)
    }
}

import Foundation

final class SignOutUseCase {
    private let repository: AuthRepository
    
    init(repository: AuthRepository) {
        self.repository = repository
    }
    
    func execute() async throws {
        try await repository.signOut()
    }
}

import Foundation
import UIKit
import GoogleSignIn

final class GoogleAuthService {
    static let shared = GoogleAuthService()
    
    private var configuration: GIDConfiguration?
    private var currentUser: GIDGoogleUser?
    
    private init() {}
    
    func configure(with clientID: String) {
        configuration = GIDConfiguration(clientID: clientID)
    }
    
    func signIn(presentingViewController: UIViewController) async throws -> GIDGoogleUser {
        guard let configuration = configuration else {
            throw AuthError.invalidClientID
        }
        
        return try await withCheckedThrowingContinuation { continuation in
            GIDSignIn.sharedInstance.signIn(
                with: configuration,
                presenting: presentingViewController
            ) { user, error in
                if let error = error {
                    continuation.resume(throwing: AuthError.signInFailed(error.localizedDescription))
                    return
                }
                
                guard let user = user else {
                    continuation.resume(throwing: AuthError.signInFailed("Unknown error"))
                    return
                }
                
                self.currentUser = user
                continuation.resume(returning: user)
            }
        }
    }
    
    func signOut() async throws {
        return try await withCheckedThrowingContinuation { continuation in
            GIDSignIn.sharedInstance.signOut()
            self.currentUser = nil
            continuation.resume(returning: ())
        }
    }
    
    func restorePreviousSignIn() async throws -> GIDGoogleUser? {
        return try await withCheckedThrowingContinuation { continuation in
            GIDSignIn.sharedInstance.restorePreviousSignIn { user, error in
                if let error = error {
                    continuation.resume(throwing: AuthError.signInFailed(error.localizedDescription))
                    return
                }
                
                self.currentUser = user
                continuation.resume(returning: user)
            }
        }
    }
}

import Foundation
import UIKit

final class AuthRepositoryImpl: AuthRepository {
    private let googleAuthService = GoogleAuthService.shared
    private let userDefaults = UserDefaults.standard
    private let userDefaultsKey = "com.mygamesdk.currentUser"
    
    private(set) var currentUser: User?
    
    init() {
        // 저장된 사용자 불러오기
        if let userData = userDefaults.data(forKey: userDefaultsKey),
           let user = try? JSONDecoder().decode(User.self, from: userData) {
            self.currentUser = user
        }
    }
    
    func signIn(clientID: String) async throws -> User {
        // Configure Google Sign-In
        googleAuthService.configure(with: clientID)
        
        // Find the topmost view controller to present the sign-in UI
        guard let topViewController = UIApplication.shared.windows.first?.rootViewController?.topmostViewController else {
            throw AuthError.signInFailed("Cannot find view controller to present sign-in UI")
        }
        
        // Perform sign-in
        let googleUser = try await googleAuthService.signIn(presentingViewController: topViewController)
        
        // Extract user info
        guard let profile = googleUser.profile else {
            throw AuthError.signInFailed("Could not get user profile")
        }
        
        let user = User(
            email: profile.email,
            name: profile.name,
            profileImageURL: profile.imageURL(withDimension: 200)
        )
        
        // Save user
        self.currentUser = user
        let userData = try JSONEncoder().encode(user)
        userDefaults.set(userData, forKey: userDefaultsKey)
        
        return user
    }
    
    func signOut() async throws {
        try await googleAuthService.signOut()
        currentUser = nil
        userDefaults.removeObject(forKey: userDefaultsKey)
    }
}

import UIKit
import SnapKit

final class ProfileViewController: UIViewController {
    private let user: User?
    private let authService: AuthService
    
    private let containerView = UIView()
    private let profileImageView = UIImageView()
    private let nameLabel = UILabel()
    private let emailLabel = UILabel()
    private let signOutButton = UIButton(type: .system)
    
    init(user: User?, authService: AuthService) {
        self.user = user
        self.authService = authService
        super.init(nibName: nil, bundle: nil)
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        
        if let user = user {
            configureWithUser(user)
        } else {
            showErrorView()
        }
    }
    
    private func setupUI() {
        view.backgroundColor = .systemBackground
        title = "사용자 프로필"
        
        // 컨테이너 뷰 설정
        view.addSubview(containerView)
        containerView.snp.makeConstraints { make in
            make.center.equalToSuperview()
            make.width.equalTo(300)
            make.height.greaterThanOrEqualTo(300)
        }
        
        // 프로필 이미지 뷰 설정
        profileImageView.contentMode = .scaleAspectFill
        profileImageView.clipsToBounds = true
        profileImageView.layer.cornerRadius = 50
        containerView.addSubview(profileImageView)
        profileImageView.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(20)
            make.centerX.equalToSuperview()
            make.width.height.equalTo(100)
        }
        
        // 이름 레이블 설정
        nameLabel.font = .systemFont(ofSize: 24, weight: .bold)
        nameLabel.textAlignment = .center
        containerView.addSubview(nameLabel)
        nameLabel.snp.makeConstraints { make in
            make.top.equalTo(profileImageView.snp.bottom).offset(20)
            make.leading.trailing.equalToSuperview()
        }
        
        // 이메일 레이블 설정
        emailLabel.font = .systemFont(ofSize: 16)
        emailLabel.textAlignment = .center
        emailLabel.textColor = .secondaryLabel
        containerView.addSubview(emailLabel)
        emailLabel.snp.makeConstraints { make in
            make.top.equalTo(nameLabel.snp.bottom).offset(8)
            make.leading.trailing.equalToSuperview()
        }
        
        // 로그아웃 버튼 설정
        signOutButton.setTitle("로그아웃", for: .normal)
        signOutButton.backgroundColor = .systemRed
        signOutButton.setTitleColor(.white, for: .normal)
        signOutButton.layer.cornerRadius = 8
        signOutButton.addTarget(self, action: #selector(signOutTapped), for: .touchUpInside)
        containerView.addSubview(signOutButton)
        signOutButton.snp.makeConstraints { make in
            make.top.equalTo(emailLabel.snp.bottom).offset(40)
            make.centerX.equalToSuperview()
            make.width.equalTo(200)
            make.height.equalTo(44)
            make.bottom.equalToSuperview().offset(-20)
        }
    }
    
    private func configureWithUser(_ user: User) {
        nameLabel.text = user.name
        emailLabel.text = user.email
        
        if let profileImageURL = user.profileImageURL {
            // 실제 구현에서는 이미지 로딩 라이브러리 사용 권장
            DispatchQueue.global().async {
                if let data = try? Data(contentsOf: profileImageURL),
                   let image = UIImage(data: data) {
                    DispatchQueue.main.async {
                        self.profileImageView.image = image
                    }
                }
            }
        } else {
            // 기본 이미지 설정
            profileImageView.image = UIImage(systemName: "person.circle.fill")
        }
    }
    
    private func showErrorView() {
        // 에러 뷰 구성
        let errorLabel = UILabel()
        errorLabel.text = "로그인이 필요합니다"
        errorLabel.font = .systemFont(ofSize: 20, weight: .medium)
        errorLabel.textAlignment = .center
        
        let loginButton = UIButton(type: .system)
        loginButton.setTitle("로그인", for: .normal)
        loginButton.backgroundColor = .systemBlue
        loginButton.setTitleColor(.white, for: .normal)
        loginButton.layer.cornerRadius = 8
        loginButton.addTarget(self, action: #selector(loginTapped), for: .touchUpInside)
        
        containerView.addSubview(errorLabel)
        containerView.addSubview(loginButton)
        
        errorLabel.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.centerY.equalToSuperview().offset(-30)
        }
        
        loginButton.snp.makeConstraints { make in
            make.top.equalTo(errorLabel.snp.bottom).offset(20)
            make.centerX.equalToSuperview()
            make.width.equalTo(200)
            make.height.equalTo(44)
        }
    }
    
    @objc private func signOutTapped() {
        Task {
            do {
                try await authService.signOut()
                dismiss(animated: true)
            } catch {
                // 에러 처리
                let alert = UIAlertController(
                    title: "로그아웃 실패",
                    message: error.localizedDescription,
                    preferredStyle: .alert
                )
                alert.addAction(UIAlertAction(title: "확인", style: .default))
                present(alert, animated: true)
            }
        }
    }
    
    @objc private func loginTapped() {
        dismiss(animated: true)
    }
}

import Foundation

struct LocalNotification: Identifiable {
    let id: String
    let title: String
    let body: String
    let triggerDate: Date
}

import Foundation

protocol NotificationRepository {
    func scheduleNotification(_ notification: LocalNotification) async throws
    func cancelNotification(withId id: String) async throws
    func cancelAllNotifications() async throws
}

import Foundation

final class ScheduleNotificationUseCase {
    private let repository: NotificationRepository
    
    init(repository: NotificationRepository) {
        self.repository = repository
    }
    
    func execute(notification: LocalNotification) async throws {
        try await repository.scheduleNotification(notification)
    }
}

import Foundation

final class CancelNotificationUseCase {
    private let repository: NotificationRepository
    
    init(repository: NotificationRepository) {
        self.repository = repository
    }
    
    func execute(id: String) async throws {
        try await repository.cancelNotification(withId: id)
    }
}

final class CancelAllNotificationsUseCase {
    private let repository: NotificationRepository
    
    init(repository: NotificationRepository) {
        self.repository = repository
    }
    
    func execute() async throws {
        try await repository.cancelAllNotifications()
    }
}

import Foundation
import UserNotifications

final class NotificationManager {
    static let shared = NotificationManager()
    
    private let notificationCenter = UNUserNotificationCenter.current()
    private var isAuthorized = false
    
    private init() {}
    
    func setupNotifications() {
        checkAuthorizationStatus()
    }
    
    private func checkAuthorizationStatus() {
        notificationCenter.getNotificationSettings { settings in
            self.isAuthorized = settings.authorizationStatus == .authorized
        }
    }
    
    func requestAuthorization() async throws -> Bool {
        do {
            let granted = try await notificationCenter.requestAuthorization(options: [.alert, .sound, .badge])
            isAuthorized = granted
            return granted
        } catch {
            throw NotificationError.permissionDenied
        }
    }
    
    func schedule(notification: LocalNotification) async throws {
        // 권한 확인
        if !isAuthorized {
            _ = try await requestAuthorization()
        }
        
        // 현재 시간이 트리거 시간보다 이후인지 확인
        if notification.triggerDate <= Date() {
            throw NotificationError.invalidTriggerDate
        }
        
        // 알림 콘텐츠 생성
        let content = UNMutableNotificationContent()
        content.title = notification.title
        content.body = notification.body
        content.sound = .default
        
        // 알림은 앱이 Foreground에 있을 때만 표시되도록 설정
        content.userInfo = ["showInForegroundOnly": true]
        
        // 트리거 생성
        let components = Calendar.current.dateComponents([.year, .month, .day, .hour, .minute, .second], from: notification.triggerDate)
        let trigger = UNCalendarNotificationTrigger(dateMatching: components, repeats: false)
        
        // 요청 생성
        let request = UNNotificationRequest(identifier: notification.id, content: content, trigger: trigger)
        
        // 알림 스케줄링
        try await notificationCenter.add(request)
    }
    
    func cancelNotification(withId id: String) async {
        notificationCenter.removePendingNotificationRequests(withIdentifiers: [id])
    }
    
    func cancelAllNotifications() async {
        notificationCenter.removeAllPendingNotificationRequests()
    }
}

import Foundation

final class NotificationRepositoryImpl: NotificationRepository {
    private let notificationManager = NotificationManager.shared
    
    func scheduleNotification(_ notification: LocalNotification) async throws {
        try await notificationManager.schedule(notification: notification)
    }
    
    func cancelNotification(withId id: String) async throws {
        await notificationManager.cancelNotification(withId: id)
    }
    
    func cancelAllNotifications() async throws {
        await notificationManager.cancelAllNotifications()
    }
}

import UserNotifications

public final class NotificationDelegate: NSObject, UNUserNotificationCenterDelegate {
    public static let shared = NotificationDelegate()
    
    private override init() {
        super.init()
    }
    
    public func userNotificationCenter(
        _ center: UNUserNotificationCenter,
        willPresent notification: UNNotification,
        withCompletionHandler completionHandler: @escaping (UNNotificationPresentationOptions) -> Void
    ) {
        // 알림의 userInfo에서 Foreground 전용 플래그 확인
        let userInfo = notification.request.content.userInfo
        let showInForegroundOnly = userInfo["showInForegroundOnly"] as? Bool ?? false
        
        // 앱이 Foreground에 있고, Foreground 전용 플래그가 설정된 경우에만 알림 표시
        if UIApplication.shared.applicationState == .active && showInForegroundOnly {
            if #available(iOS 14.0, *) {
                completionHandler([.banner, .sound])
            } else {
                completionHandler([.alert, .sound])
            }
        } else {
            completionHandler([])
        }
    }
}

import UIKit

extension UIViewController {
    var topmostViewController: UIViewController {
        if let presented = presentedViewController {
            return presented.topmostViewController
        }
        
        if let tabBarController = self as? UITabBarController,
           let selected = tabBarController.selectedViewController {
            return selected.topmostViewController
        }
        
        if let navigationController = self as? UINavigationController,
           let visibleViewController = navigationController.visibleViewController {
            return visibleViewController.topmostViewController
        }
        
        return self
    }
}

import UIKit
import MyGameSDK

@main
class AppDelegate: UIResponder, UIApplicationDelegate {
    var window: UIWindow?
    
    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
        // SDK 초기화
        MyGameSDK.shared.configure()
        return true
    }
    
    // Google Sign-In을 위한 URL 스킴 처리
    func application(_ app: UIApplication, open url: URL, options: [UIApplication.OpenURLOptionsKey: Any] = [:]) -> Bool {
        return true // 실제 구현에서는 GIDSignIn.sharedInstance.handle(url) 호출
    }
}

import UIKit
import SnapKit
import MyGameSDK

class ViewController: UIViewController {
    // UI 요소 정의
    private let signInButton = UIButton(type: .system)
    private let signOutButton = UIButton(type: .system)
    private let profileButton = UIButton(type: .system)
    private let scheduleNotificationButton = UIButton(type: .system)
    private let cancelNotificationButton = UIButton(type: .system)
    private let statusLabel = UILabel()
    
    // SDK 참조
    private let authService = MyGameSDK.shared.auth
    private let notificationService = MyGameSDK.shared.notification
    
    // Google 클라이언트 ID (실제 앱에서는 Info.plist에서 관리)
    private let googleClientID = "YOUR_GOOGLE_CLIENT_ID.apps.googleusercontent.com"
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        updateUIState()
    }
    
    private func setupUI() {
        view.backgroundColor = .systemBackground
        
        // 상태 레이블 설정
        statusLabel.textAlignment = .center
        statusLabel.font = .systemFont(ofSize: 18)
        statusLabel.numberOfLines = 0
        view.addSubview(statusLabel)
        
        // 로그인 버튼 설정
        signInButton.setTitle("Google 로그인", for: .normal)
        signInButton.backgroundColor = .systemBlue
        signInButton.setTitleColor(.white, for: .normal)
        signInButton.layer.cornerRadius = 8
        signInButton.addTarget(self, action: #selector(signInTapped), for: .touchUpInside)
        view.addSubview(signInButton)
        
        // 로그아웃 버튼 설정
        signOutButton.setTitle("로그아웃", for: .normal)
        signOutButton.backgroundColor = .systemRed
        signOutButton.setTitleColor(.white, for: .normal)
        signOutButton.layer.cornerRadius = 8
        signOutButton.addTarget(self, action: #selector(signOutTapped), for: .touchUpInside)
        view.addSubview(signOutButton)
        
        // 프로필 버튼 설정
        profileButton.setTitle("프로필 보기", for: .normal)
        profileButton.backgroundColor = .systemGreen
        profileButton.setTitleColor(.white, for: .normal)
        profileButton.layer.cornerRadius = 8
        profileButton.addTarget(self, action: #selector(profileTapped), for: .touchUpInside)
        view.addSubview(profileButton)
        
        // 알림 예약 버튼 설정
        scheduleNotificationButton.setTitle("알림 예약 (10초 후)", for: .normal)
        scheduleNotificationButton.backgroundColor = .systemOrange
        scheduleNotificationButton.setTitleColor(.white, for: .normal)
        scheduleNotificationButton.layer.cornerRadius = 8
        scheduleNotificationButton.addTarget(self, action: #selector(scheduleNotificationTapped), for: .touchUpInside)
        view.addSubview(scheduleNotificationButton)
        
        // 알림 취소 버튼 설정
        cancelNotificationButton.setTitle("모든 알림 취소", for: .normal)
        cancelNotificationButton.backgroundColor = .systemPurple
        cancelNotificationButton.setTitleColor(.white, for: .normal)
        cancelNotificationButton.layer.cornerRadius = 8
        cancelNotificationButton.addTarget(self, action: #selector(cancelNotificationsTapped), for: .touchUpInside)
        view.addSubview(cancelNotificationButton)
        
        // SnapKit을 사용한 오토레이아웃 설정
        statusLabel.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(view.safeAreaLayoutGuide.snp.top).offset(40)
            make.leading.equalToSuperview().offset(20)
            make.trailing.equalToSuperview().offset(-20)
        }
        
        signInButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(statusLabel.snp.bottom).offset(40)
            make.width.equalTo(200)
            make.height.equalTo(44)
        }
        
        signOutButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(signInButton.snp.bottom).offset(20)
            make.width.equalTo(200)
            make.height.equalTo(44)
        }
        
        profileButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(signOutButton.snp.bottom).offset(20)
            make.width.equalTo(200)
            make.height.equalTo(44)
        }
        
        scheduleNotificationButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(profileButton.snp.bottom).offset(40)
            make.width.equalTo(250)
            make.height.equalTo(44)
        }
        
        cancelNotificationButton.snp.makeConstraints { make in
            make.centerX.equalToSuperview()
            make.top.equalTo(scheduleNotificationButton.snp.bottom).offset(20)
            make.width.equalTo(250)
            make.height.equalTo(44)
        }
    }
    
    private func updateUIState() {
        // 로그인 상태에 따라 UI 업데이트
        let isSignedIn = authService.isSignedIn
        
        signInButton.isEnabled = !isSignedIn
        signOutButton.isEnabled = isSignedIn
        profileButton.isEnabled = isSignedIn
        
        statusLabel.text = isSignedIn ? "로그인 상태: 로그인됨" : "로그인 상태: 로그아웃됨"
    }
    
    @objc private func signInTapped() {
        Task {
            do {
                let user = try await authService.signIn(clientID: googleClientID)
                DispatchQueue.main.async {
                    self.statusLabel.text = "로그인 성공: \(user.name)"
                    self.updateUIState()
                }
            } catch {
                DispatchQueue.main.async {
                    self.statusLabel.text = "로그인 실패: \(error.localizedDescription)"
                }
            }
        }
    }
    
    @objc private func signOutTapped() {
        Task {
            do {
                try await authService.signOut()
                DispatchQueue.main.async {
                    self.statusLabel.text = "로그아웃 성공"
                    self.updateUIState()
                }
            } catch {
                DispatchQueue.main.async {
                    self.statusLabel.text = "로그아웃 실패: \(error.localizedDescription)"
                }
            }
        }
    }
    
    @objc private func profileTapped() {
        authService.showProfileView(from: self)
    }
    
    @objc private func scheduleNotificationTapped() {
        // 10초 후에 알림 예약
        let triggerDate = Date().addingTimeInterval(10)
        
        Task {
            do {
                try await notificationService.scheduleNotification(
                    id: "test-notification",
                    title: "테스트 알림",
                    body: "이것은 MyGameSDK로 예약된 테스트 알림입니다.",
                    triggerDate: triggerDate
                )
                
                DispatchQueue.main.async {
                    self.statusLabel.text = "알림이 10초 후로 예약되었습니다."
                }
            } catch {
                DispatchQueue.main.async {
                    self.statusLabel.text = "알림 예약 실패: \(error.localizedDescription)"
                }
            }
        }
    }
    
    @objc private func cancelNotificationsTapped() {
        Task {
            do {
                try await notificationService.cancelAllNotifications()
                
                DispatchQueue.main.async {
                    self.statusLabel.text = "모든 알림이 취소되었습니다."
                }
            } catch {
                DispatchQueue.main.async {
                    self.statusLabel.text = "알림 취소 실패: \(error.localizedDescription)"
                }
            }
        }
    }
}





#!/bin/bash

# 빌드 설정
FRAMEWORK_NAME="MyGameSDK"
CONFIGURATION="Release"
UNIVERSAL_OUTPUTFOLDER="build/${CONFIGURATION}-universal"

# 빌드 디렉토리 생성
mkdir -p "${UNIVERSAL_OUTPUTFOLDER}"

# 시뮬레이터와 기기용으로 빌드
xcodebuild -workspace "${FRAMEWORK_NAME}.xcworkspace" -scheme "${FRAMEWORK_NAME}" -configuration ${CONFIGURATION} -sdk iphonesimulator -arch x86_64 BUILD_LIBRARIES_FOR_DISTRIBUTION=YES BUILD_DIR="${BUILD_DIR}" BUILD_ROOT="${BUILD_ROOT}" clean build
xcodebuild -workspace "${FRAMEWORK_NAME}.xcworkspace" -scheme "${FRAMEWORK_NAME}" -configuration ${CONFIGURATION} -sdk iphoneos -arch arm64 BUILD_LIBRARIES_FOR_DISTRIBUTION=YES BUILD_DIR="${BUILD_DIR}" BUILD_ROOT="${BUILD_ROOT}" clean build

# 프레임워크 디렉토리 복사
cp -R "${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_NAME}.framework" "${UNIVERSAL_OUTPUTFOLDER}/"

# 유니버설 바이너리 생성
lipo -create -output "${UNIVERSAL_OUTPUTFOLDER}/${FRAMEWORK_NAME}.framework/${FRAMEWORK_NAME}" "${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/${FRAMEWORK_NAME}.framework/${FRAMEWORK_NAME}" "${BUILD_DIR}/${CONFIGURATION}-iphoneos/${FRAMEWORK_NAME}.framework/${FRAMEWORK_NAME}"

# 빌드 결과 출력
echo "Framework built at ${UNIVERSAL_OUTPUTFOLDER}/${FRAMEWORK_NAME}.framework"
